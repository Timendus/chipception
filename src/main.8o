:include "macros.8o"

: main

    # Initialize machines table at `free-memory`, machines will be created after
    # the machines table.
    :alias unpack-hi v0
    :alias unpack-lo v1
    :unpack long free-memory
    v4 := MAX_MACHINES
    v1 += v4
    v0 += vF
    v1 += v4
    v0 += vF
    make16 v2 v3 MACHINE_SIZE
    i := long free-memory
    loop
        save v1
        v1 += v3
        v0 += vF
        v0 += v2
        if vF != 0 begin
            :breakpoint "Can't store that many machines"
            no-op
        end
        v4 -= 1
        if v4 != 0 then
    again

    # Make sure we are running in hires ourselves and we sound friendly
    hires
    clear
    i := long beep-pattern
    audio
    v0 := 70
    pitch := v0

    # Initialize the booting programs
    # init 3 10 10 CHIP8     rom-clip-test
    # reset-quirk CLIP_QUIRK
    init 1 38  8 SUPERCHIP rom-space-invaders
    init 2  5 22 CHIP8     rom-christmas
    init 0 60 29 VIP       rom-flags

    update-focussed

    # Run forever
    loop
        v0 := 1
        delay := v0

        # Run each CPU for the requested number of cycles
        current-machine := 0
        loop
            i := long current-number-of-machines
            load v0
            while current-machine != v0
            select-machine
            point-to RUNNING
            load v0
            if v0 != STATE_STOPPED begin
                point-to CYCLES_PER_FRAME
                load cycle - cycle
                loop
                    run-cycle
                    cycle -= 1
                    if cycle != 0 then
                again
            end
            current-machine += 1
        again

        # Run all the timer stuff for each CPU
        current-machine := 0
        vD := 0
        i := long current-number-of-machines
        load vC - vC
        loop
            while current-machine != vC
            select-machine
            point-to RUNNING
            load v0
            if v0 != STATE_STOPPED begin
                # Decrement timers and play sound
                point-to DELAY_TIMER
                load v0 - v0
                if v0 != 0 then v0 -= 1
                save v0
                point-to SOUND_TIMER
                load v0 - v0
                if v0 != 0 begin
                    v0 -= 1
                    vD := 1
                end
                save v0

                # Check if we're waiting for dispQuirk
                point-to RUNNING
                load v0 - v0
                if v0 == STATE_WAITING_FOR_INTERRUPT then
                    v0 := STATE_INTERRUPT_TRIGGERED
                save v0
            end

            current-machine += 1
        again
        buzzer := vD

        composite-display

        # Wait to sync up with reality
        loop
            v0 := delay
            if v0 != 0 then
        again

        # Check for magic key combo's
        v0 := 0xA
        if v0 key begin

            # Z + R -> Reset program
            v0 := 0xD
            if v0 key then reset-focussed

            # Z + 1 -> Cycle through programs
            v0 := 1
            if v0 key then alt-tab

            # Z + Q -> Close program
            v0 := 4
            if v0 key then close-focussed

            # Z + W -> Move window
            v0 := 5
            if v0 key then move-focussed

            # Z + F -> Go full screen
            # v0 := 0xE
            # if v0 key then ...

            # Z + X -> Open menu
            # v0 := 0
            # if v0 key then ...
        end
    again

# Rerender the screen
: composite-display
    display-clear
    vD := 0
    loop
        # Find the interpreter at this depth
        find-z-position
        while v2 == 0
        # Render this CPUs display
        point-to WINDOW_POSITION
        load v0 - v1
        v0 -= 1
        v1 -= 7
        v2 := 66
        v3 := 40
        point-to FOCUSSED
        load v4 - v4
        vC := 0xFF
        if v4 == 1 then vC := 0
        draw-box
        draw-header
        point-to WINDOW_POSITION
        load v2 - v3
        vF := DISPLAY_BUFFER
        unpack-pointer
        v4 := 8             # TODO: hires
        v5 := 32
        blit-to-display
        vD += 1
    again
    jump display-copy

# Find the machine that is at the given z-position.
# Input: vD is desired z-position
# Returns:
#  * v2 == 0 if found; right machine selected
#  * v2 == 1 if not found
: find-z-position
    current-machine := 0
    i := long current-number-of-machines
    load vC - vC
: find-z-pos-loop
    v2 := 1
    if current-machine == vC then return
    v2 := 0
    select-machine
    current-machine += 1
    point-to RUNNING
    load v0
    if v0 == STATE_STOPPED then jump find-z-pos-loop
    point-to WINDOW_POSITION_Z
    load v0
    if v0 == vD then return
    jump find-z-pos-loop

# Update the focussed properties on all machines. A machine is focussed (`1`) if
# its Z position is the highest, so in other words: it's on top. Otherwise, it
# is `0`. Purposeful side-effect: this routine selects the focussed machine.
: update-focussed
    # Find window with highest Z position that's running
    current-machine := 0
    v2 := 0
    v3 := 0
    i := long current-number-of-machines
    load v4 - v4
    loop
        while current-machine != v4
        select-machine
        point-to FOCUSSED
        v0 := 0
        save v0
        point-to RUNNING
        load v0
        if v0 != STATE_STOPPED begin
            point-to WINDOW_POSITION_Z
            load v0
            if v0 > v3 begin
                v3 := v0
                v2 := current-machine
            end
        end
        current-machine += 1
    again
    current-machine := v2
    select-machine
    point-to FOCUSSED
    v0 := 1
    save v0
    return

: swap-with-below
    update-focussed
    v5 := current-machine
    v6 := current-machine
    point-to WINDOW_POSITION_Z
    load vD - vD
    v7 := vD
    v3 := v9
    loop
        while v3 > vD
        v3 -= vD
    again
    # Find v9th window below me
    v2 := 1
    loop
        while vD != 255
        while v3 != 0
        loop
            vD -= 1
            while vD != 255
            find-z-position
            if v2 == 1 then
        again
        v3 -= 1
    again

    # I'm the only window :(
    if v2 == 1 then return

    # We've found and selected a window below me.
    # Swap Z position with that window.
    point-to WINDOW_POSITION_Z
    load v8 - v8
    save v7 - v7
    current-machine := v5
    select-machine
    point-to WINDOW_POSITION_Z
    save v8 - v8

    return

: alt-tab
    # We don't have any safe registers left, so store Alt-Tab distance in RAM
    v0 := 0
    i := long alt-tab-store
    save v0
    loop
        # If A released, we're done
        v0 := 0xA
        if v0 -key begin
            update-focussed
            return
        end
        # If 1 pressed, cycle through windows
        v0 := 1
        if v0 key begin
            i := long alt-tab-store
            load v9 - v9
            v9 += 1
            save v9 - v9
            swap-with-below
            update-focussed
            composite-display
            # Wait for release
            v0 := 1
            loop
                if v0 key then
            again
        end
    again
:segment data
: alt-tab-store
    0
:segment code

: reset-focussed
    update-focussed
    reset
    jump wait-release

: move-focussed
    wait-release
    loop
        # Move focussed window around
        update-focussed
        point-to WINDOW_POSITION
        load v0 - v1
        if v1 != 7 begin
            v2 := 5
            if v2 key then v1 -= 1
        end
        if v0 != 1 begin
            v2 := 7
            if v2 key then v0 -= 1
        end
        if v1 != 31 begin
            v2 := 8
            if v2 key then v1 += 1
        end
        if v0 != 63 begin
            v2 := 9
            if v2 key then v0 += 1
        end
        save v0 - v1
        composite-display

        # Limit movement to one pixel per frame
        v0 := 1
        delay := v0
        loop
            v0 := delay
            if v0 != 0 then
        again

        # Exit movement code by pressing Z
        v0 := 0xA
        if v0 key then return
    again

: close-focussed
    update-focussed
    point-to RUNNING
    v0 := STATE_STOPPED
    save v0
    update-focussed
    # jump wait-release  # fall through

: wait-release
    v0 := 0xA
    if v0 key then jump wait-release
    return

# Lazily reset the interpreter
: reset
    set16 PC               0x200
    set8  SP               0
    set8  DISPLAY_MODE     DISPLAY_LORES
    set8  RUNNING          STATE_RUNNING
    set8  CYCLES_PER_FRAME 30
    clear-screen
    :alias unpack-hi v1
    :alias unpack-lo v2
    :unpack long chip-8-font
    load-font
    # load-program  # Fall through
    # return

# Copy interpreter's ROM into RAM at 0x200
: load-program
    point-to ROM
    load v1
    i := load-program-smc
    save v1
    make16 vC vD 0
    loop
        0xF0 0x00
        : load-program-smc
        0x00 0x00
        # i == program address
        load-program-add
        # i == byte within program
        load v7
        point-to RAM
        vC += 2
        load-program-add
        vC -= 2
        save v7

        # Increase index
        vF := 8
        vD += vF
        vC += vF

        # Are we done? (Just fill RAM, whatever)
        if vC != 0x0E then
    again
    return

# Add (v3, v4) as one 16-bit number to the index register
: load-program-add
    vB := vC
    add-to-i vB vD
    return

# (v1, v2) point to font data, copy it into RAM at 0x000
: load-font
    v3 := 0
    loop
        i := load-font-smc
        save v1 - v2
        0xF0 0x00   # i := long ...
        : load-font-smc
        0x00 0x00
        i += v3
        load v0
        point-to RAM
        i += v3
        save v0
        v3 += 1
        if v3 != 180 then
    again
    return

: pointer-to
    i := long current-machine-ptr
    load vA - vB
    i := load-pointer-smc
    save vA - vB
    0xF0 0x00   # i := long ...
    : load-pointer-smc
    0x00 0x00
    i += vF
    return

: unpack-pointer
    i := long current-machine-ptr
    load vA - vB
    vB += vF
    vA += vF
    return

: select-machine
    i := long free-memory
    i += current-machine
    i += current-machine
    load v1
    i := long current-machine-ptr
    save v1
    return

:segment data

: window-mode
    :byte MODE_WINDOWED
: current-machine-ptr
    :pointer free-memory
: current-number-of-machines
    0

:monitor current-number-of-machines 1

: beep-pattern
    0xFF 0x00 0xFF 0x00 0xFF 0x00 0xFF 0x00 0xFF 0x00 0xFF 0x00 0xFF 0x00 0xFF 0x00

:include "decoder.8o"
:include "opcodes.8o"
:include "display.8o"
:include "gui.8o"
:include "fonts.8o"
:include "roms.8o"

: free-memory
    # Starts here
