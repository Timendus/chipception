:include "math/macros.8o"

:macro launch {
	:byte 0xF0
	:byte 0x05
}

: main
	i := rom-table
	load v0
	vA := v0   # Total number of items
	vE := vA
	vE -= 1
	calculate-handle-positions
	vD := 0    # Selected item

: main-loop
	# Wait for key release
	v0 := 5
	if v0 key then jump main-loop
	v0 := 8
	if v0 key then jump main-loop

	clear
	# Where do we start rendering?
	vB := vD
	if vD != 0 then vB -= 1
	if vD == vE then vB -= 1
	vC := 2    # Y coordinate of start item

	# Render the items that fit on screen
	loop
		while vC != 32
		while vB != vA
		v2 := vB
		find-program
		render-program
		if vB == vD then highlight
		vB += 1
		vC += 10
	again

	render-scrollbar

	# Wait for user input
	loop
		v0 := key
		if v0 == 5 begin
			if vD == 0 then vD := vA
			vD -= 1
			jump main-loop
		end
		if v0 == 8 begin
			if vD == vE begin
				vD := 0
			else
				vD += 1
			end
			jump main-loop
		end
		if v0 == 6 then launch-program
	again

# v2 is the index of a program, get a pointer to the start in i and v0, v1
# Destroys: i, v0, v1, v2, v3, v4
: find-program
	i := rom-table
	vF := 1
	i += vF
	loop
		while v2 != 0
		v2 -= 1
		vF := 58	# An entry is 2 + 56 bytes long
		i += vF
		# We're now pointing to the next entry
	again
	return

# i points to a program entry
# Render that program at Y = vC
: render-program
	v2 := 2
	v3 := 2
	i += v3
	v3 := 8
	loop
		while v2 != 58
		sprite v2 vC 8
		i += v3
		v2 += 8
	again
	return

# Draw a highlight at Y = vC
: highlight
	v2 := 0
	v3 := vC
	v3 -= 1
	i := highlight-sprite
	loop
		while v2 != 60
		sprite v2 v3 0
		v2 += 10
	again
	return

# Draw the scrollbar at proportion "vD / vA"
# Destroys: v0 - v8
: render-scrollbar
	i := scrollbar-line
	v1 := 60
	v2 := 0
	loop
		while v2 != 32
		sprite v1 v2 8
		v2 += 8
	again

	i := handle-positions
	i += vD
	load v0

	i := scrollbar-handle
	sprite v1 v0 8
	return

# Pre-calculate all the positions the handle needs to be in
# vA = total number of items
: calculate-handle-positions
	vD := 0
	loop
		while vD != vA

		v1 := vD
		v2 := 24
		mul-8-8 v1 v2 v3 v4 v5 			# [v3, v4] = v1 * v2

		v5 := vA
		v5 -= 1
		div-16-8 v3 v4 v5 v6 v7 v8		# v4 = [v3, v4] / v5

		i := handle-positions
		i += vD
		v0 := v4
		save v0

		vD += 1
	again
	return

# Launch selected program, index is in vD
: launch-program
	v2 := vD
	find-program
	load v1
	launch
	return

:segment data

: highlight-sprite
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0xFF 0xC0
	0x00 0x00
	0x00 0x00
	0x00 0x00
	0x00 0x00
	0x00 0x00
	0x00 0x00

: scrollbar-line
	0b01000000
	0b01000000
	0b01000000
	0b01000000
	0b01000000
	0b01000000
	0b01000000
	0b01000000

: scrollbar-handle
	0b00100000
	0b01010000
	0b01010000
	0b01010000
	0b01010000
	0b01010000
	0b01010000
	0b00100000

: handle-positions
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: rom-table
